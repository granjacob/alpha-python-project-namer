#!/usr/bin/env python3
import os
import json
import argparse

# Lista del alfabeto griego en orden
GREEK_ALPHABET = [
    "alpha", "beta", "gamma", "delta", "epsilon", "zeta", "eta", "theta",
    "iota", "kappa", "lambda", "mu", "nu", "xi", "omicron", "pi", "rho",
    "sigma", "tau", "upsilon", "phi", "chi", "psi", "omega"
]

STATE_FILE = os.path.expanduser("~/.gran_state")


def load_state():
    if os.path.exists(STATE_FILE):
        with open(STATE_FILE, "r") as f:
            return json.load(f)
    return []


def save_state(state):
    with open(STATE_FILE, "w") as f:
        json.dump(state, f, indent=2)


def get_or_create_dir_state(state, current_dir):
    for entry in state:
        if entry["dir"] == current_dir:
            return entry
    new_entry = {"dir": current_dir, "last_index": 0}
    state.append(new_entry)
    return new_entry


def get_prefix_from_index(index):
    length = len(GREEK_ALPHABET)
    if index < length:
        return GREEK_ALPHABET[index]
    first = (index // length) - 1
    second = index % length
    return GREEK_ALPHABET[first] + GREEK_ALPHABET[second]


def get_next_prefix(dir_path, last_index):
    existing_dirs = set(next(os.walk(dir_path))[1])
    max_index_to_check = max(last_index + 1, len(GREEK_ALPHABET) * 2)

    for i in range(max_index_to_check):
        prefix = get_prefix_from_index(i)
        matches = [d for d in existing_dirs if d.startswith(prefix + "-")]
        if not matches:
            return prefix, i

    raise RuntimeError("No available Greek prefix found.")


def main():
    parser = argparse.ArgumentParser(description="Create a named project folder with Greek prefix.")
    parser.add_argument("-i", "--input", required=True, help="Comma-separated keywords for the project")
    parser.add_argument("-s", "--suffix", help="Suffix name like domain or module")
    parser.add_argument("-d", "--directory", help="Directory path to create the project in")
    args = parser.parse_args()

    input_keywords = args.input.split(",")
    suffix = args.suffix.strip() if args.suffix else ""
    base_dir = os.path.abspath(args.directory) if args.directory else os.getcwd()

    # Load state
    state = load_state()
    dir_state = get_or_create_dir_state(state, base_dir)
    prefix, used_index = get_next_prefix(base_dir, dir_state["last_index"])

    # Update state
    dir_state["last_index"] = max(dir_state["last_index"], used_index + 1)
    save_state(state)

    # Create project name
    components = [prefix] + input_keywords + ([suffix] if suffix else [])
    project_name = "-".join(filter(None, components))
    project_path = os.path.join(base_dir, project_name)

    # Create directory if it doesn't exist
    if not os.path.exists(project_path):
        os.makedirs(project_path)

    print(f"Nombre del proyecto: {project_name}")


if __name__ == "__main__":
    main()